# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
my-key.pem

# Ignore node_modules folder
node_modules/

# Ignore logs and temporary files
*.log
*.tmp
*.bak

# Ignore build and output directories
dist/
build/

# Ignore sensitive files
.env
secrets.json

# Ignore MacOS system files
.DS_Store

# Ignore IDE and editor-specific files
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# Ignore generated files
*.class
*.exe
*.dll
*.pyc
*.o
*.out

# Ignore environment files containing sensitive credentials
.env
.env.local
.env.development
.env.production
.env.staging

# Ignore secret configuration files
secrets.json
config/secrets.yml

# Ignore AWS credentials files
.aws/credentials
.aws/config

# Ignore key files
*.pem
*.key
id_rsa*
id_dsa*

# Ignore sensitive backup files
*.bak
*.tmp

# Ignore logs
*.log
logs/
debug.log

# Ignore build outputs
dist/
build/
coverage/

